#!c:/python27/python.exe
#coding: utf8
import subprocess
import re
import fdb

ID_RESPONSAVEL = 10
ID_RESPONSAVEL_PADRAO = 5

connection = None

class Chamado:

    def __init__(self, cursor):
        self.cursor = cursor

    def finaliza(self):
        print u"==> Atualizando status do chamado #{0}".format(self.numero)
        self.adiciona_historico(u"Corrigido! Disponível no próximo release.")
        novo_responsavel = self.idoperador if self.idoperador<>self.idresponsavel else ID_RESPONSAVEL_PADRAO
        self.atualiza_responsavel(novo_responsavel)

    def adiciona_historico(self, mensagem):
        idevento = self._obtem_proximo_id_evento()
        self.cursor.execute('INSERT INTO TSolEvento (idevento, empresa, idoperador, descricao, idsolicitacao) VALUES (?, 1, ?, ?, ?)',
                            (idevento, self.idoperador, mensagem.encode('latin1'), self.numero))

    def atualiza_responsavel(self, id_responsavel):
        self.cursor.execute('UPDATE TSolSolicitacao SET responsavel=? WHERE idsolicitacao=?', (id_responsavel, self.numero))

    def _obtem_proximo_id_evento(self):
        self.cursor.execute('SELECT MAX(IdEvento)+1 Id FROM TSolEvento WHERE Empresa=1 AND IdSolicitacao={0}'.format(self.numero))
        row = self.cursor.fetchone()
        return (row[0] or 1)

    @staticmethod
    def localiza(numero_chamado, id_responsavel):
        cursor = obtem_cursor()
        cursor.execute('SELECT idoperador, responsavel '
                       'FROM TSolSolicitacao '
                       'WHERE idsolicitacao={0} AND responsavel={1}'.format(numero_chamado, id_responsavel))
        row = cursor.fetchone()
        if not row:
            return ChamadoNulo(cursor)
        else:
            chamado = Chamado(cursor)
            chamado.numero = numero_chamado
            chamado.idoperador = row[0]
            chamado.idresponsavel = row[1]
            return chamado

class ChamadoNulo(Chamado):
    
    def finaliza(self):
        pass

def obtem_msg_ultimo_commit():
    cmd = "git log -1 --oneline"
    p = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE)
    return p.communicate()[0].strip().decode('utf8')

def extrai_numero_chamado(msg_commit):
    match = re.search('#(\d+)', msg_commit)
    if match:
        return match.group(1)
    else:
        return None

def obtem_cursor():
    global connection
    if not connection:
        connection = fdb.connect(user='sysdba', password='secret_password', host='database_host', database='ello')
    return connection.cursor()

if __name__=="__main__":
    numero_chamado = extrai_numero_chamado(obtem_msg_ultimo_commit())
    if numero_chamado:
        chamado = Chamado.localiza(numero_chamado, ID_RESPONSAVEL)
        chamado.finaliza()
        connection.commit()

